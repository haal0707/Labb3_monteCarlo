# -*- coding: utf-8 -*-
"""
Created on Thu May 26 11:38:39 2022

@author: oi19ham
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
N = norm.cdf


S_zero = 100
K = [80, 100, 120]
r = 0.03
sigma = 0.2
m = [12, 52]
n = 10000
T = 1

def random_mat(n, m):
    
    Z = np.random.standard_normal((n, m + 1))
    
    return Z

def asian_call_option(S, T, K, r, sigma, m, n, z):
    
    dt = T/m
    At = np.zeros((n,1))
    St = np.zeros((n,m+1))
    St[:,0] = S
    
    for n in range(n):
        for t in range(m):
            St[n,t+1] = St[n,t] * np.exp((r - sigma**2/2)*(dt)+sigma*np.sqrt(dt) * z[n,t])
    
    for n in range(n):
        At[n,0] = np.exp(-r*T)*np.maximum((np.mean(St[n, 1:])-K),0)
    
    AP = np.mean(At)
    return AP

def delta_asian(S, T, K ,r, sigma, m, n, option):
    
    h = 1
    z = random_mat(n, m)
    
    if option == 'fd':

        payoff_1 = asian_call_option(S, T, K, r, sigma, m, n, z)
        payoff_2 = asian_call_option((S + h), T, K, r, sigma, m, n, z)
        
        payoff_1_mean = np.mean(payoff_1)
        payoff_2_mean = np.mean(payoff_2)

        
        delta = (payoff_2_mean - payoff_1_mean)/h
        
    elif option == 'cd':
        

        payoff_1 = asian_call_option((S - h), T, K, r, sigma, m, n, z)
        payoff_2 = asian_call_option((S + h), T, K, r, sigma, m, n, z)
        
        payoff_1_mean = np.mean(payoff_1)
        payoff_2_mean = np.mean(payoff_2)
        
        delta = (payoff_2_mean - payoff_1_mean)/(2*h)
        
    return delta

def vega_asian(S, T, K, r, sigma, m, n, option):
    
    h = 0.01
    z = random_mat(n, m)
    
    if option == 'fd':
        
        payoff_1 = asian_call_option(S, T, K, r, sigma, m, n, z)
        payoff_2 = asian_call_option(S, T, K, r, (sigma + h), m, n, z)
        
        payoff_1_mean = np.mean(payoff_1)
        payoff_2_mean = np.mean(payoff_2)
        
        vega = (payoff_2_mean - payoff_1_mean)/h
        
    elif option == 'cd':
        
        payoff_1 = asian_call_option(S, T, K, r, (sigma - h), m, n, z)
        payoff_2 = asian_call_option(S, T, K, r, (sigma + h), m, n, z)
        
        payoff_1_mean = np.mean(payoff_1)
        payoff_2_mean = np.mean(payoff_2)
        
        vega = (payoff_2_mean - payoff_1_mean)/(2*h)
        
    return vega

delta_12_fd = [delta_asian(S_zero, T, k, r, sigma, m[0], n, 'fd') for k in K]
delta_52_fd = [delta_asian(S_zero, T, k, r, sigma, m[1], n, 'fd') for k in K]
delta_12_cd = [delta_asian(S_zero, T, k, r, sigma, m[0], n, 'cd') for k in K]
delta_52_cd = [delta_asian(S_zero, T, k, r, sigma, m[1], n, 'cd') for k in K]

vega_12_fd = [vega_asian(S_zero, T, k, r, sigma, m[0], n, 'fd') for k in K]
vega_52_fd = [vega_asian(S_zero, T, k, r, sigma, m[1], n, 'fd') for k in K]
vega_12_cd = [vega_asian(S_zero, T, k, r, sigma, m[0], n, 'cd') for k in K]
vega_52_cd = [vega_asian(S_zero, T, k, r, sigma, m[1], n, 'cd') for k in K]

index = ['Strike price','Delta f.d', 'Delta c.d', 'Vega f.d', 'Vega c.d']
columns = ['m = 12', 'm = 52', 'm = 12', 'm = 52', 'm = 12', 'm = 52']

row_0 = ['K = 80', 'K = 80', 'K = 100', 'K = 100', 'K = 120', 'K = 120']
row_1 = [delta_12_fd[0], delta_52_fd[0], delta_12_fd[1], delta_52_fd[1], delta_12_fd[2], delta_52_fd[2]]
row_2 = [delta_12_cd[0], delta_52_cd[0], delta_12_cd[1], delta_52_cd[1], delta_12_cd[2], delta_52_cd[2]]
row_3 = [vega_12_fd[0], vega_52_fd[0], vega_12_fd[1], vega_52_fd[1], vega_12_fd[2], vega_52_fd[2]]
row_4 = [vega_12_cd[0], vega_52_cd[0], vega_12_cd[1], vega_52_cd[1], vega_12_cd[2], vega_52_cd[2]]

data = [row_0, row_1, row_2, row_3, row_4]

df_Q2 = pd.DataFrame(data = data,
                     index = index,
                     columns = columns)
