# -*- coding: utf-8 -*-
"""
Created on Fri May 27 13:06:08 2022

@author: oi19ham
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
N = norm.cdf

i = [1, 2, 3, 4, 5, 6]
T = 1
S = [100, 100]
sigma = 0.3
r = 0.03
paths = 40000
rho = [0, 0.5]
K = [70, 100, 130]
n = 10000
global size
size = 2
global St

def bermuda_payoff(S, T, timeNodes, r, sigma, K, rho, N):

    cov_matrix = (rho*sigma**2)*np.ones((size, size))
    cov_matrix = cov_matrix - np.diag(np.diag(cov_matrix)) + np.diag((sigma**2)*np.ones(size))
    cov_matrix = cov_matrix*T
    At = np.zeros((N))
    A = np.linalg.cholesky(cov_matrix)
    X = np.zeros((N, size))
    disc = np.zeros((1, len(timeNodes)))
    discvec = np.zeros((N, 1))
    Z = np.random.standard_normal((N, size))
    St = np.zeros((N, size))
    
    for n in range(N):
        
        
        X[n, :] = A@Z[n, :]
        
        for k in range(2):
            
            St[n, k] = 100*np.exp((r - sigma**2/2)*T + X[n, k]) #100 is S list
    
        discvec[n, 0] = np.sum(St[n, :]*np.exp(-r*T))
        
    payoff = np.mean(discvec)
    
    return payoff
        
def least_square_MC(S, T, timeNodes, r, sigma, K, rho, N):
    
    #approximate continuation value by a linear combination of
    #chosen basic functions evaluated at s. The coefficient of the linear
    #combination and determined by regression.
    
    #Dependency of price, strike and time
    
    V = np.zeros((len(S), len(timeNodes)))
    h = np.zeros((2, 1))
    
    for i in range(len(S)):
        h = bermuda_payoff(S[i], T, timeNodes, r, sigma, K, rho, N)
    
    for i in range(len(timeNodes)):
        
        t_i = timeNodes[i]*T/6
        
        for k in range(len(S)):
            
            
            if i == timeNodes[-1]:
                
                V[k, i] = h
                
            else:
            
                V[k, i] = np.maximum(h, np.exp(-r*t_i)*np.mean(V[k, i+1]*S[i+1]))
            
            
    return 'prutt'
        
print(least_square_MC(S, T, i, r, sigma, 100, 0, 100))   
