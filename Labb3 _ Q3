def theta_delta_gamma(S,K,r,T,sigma, m):
    #time-period of delta is t-1
    #time-period of gamma is t-2
    
    dt = T/m
    bintree = np.zeros((m+1,m+1))
    bintree[0,0] = S
    Valuemat = np.zeros((m+1,m+1))
    theta = np.zeros((m-1,m-1))
    delta = np.zeros((m,m))
    gamma = np.zeros((m-1,m-1))
    
    u = np.exp(sigma*np.sqrt(dt))
    d = np.exp(-sigma*np.sqrt(dt))
    
    p = ((np.exp(r*dt)-d)/(u-d))
    q = (1-p)
    
    for t in range(m):
        for nod in range(t+1):
            if nod%2 == 0:
                bintree[nod,t+1]= bintree[nod,t] * u
                bintree[nod+1,t+1]= bintree[nod,t] * d
            else:
                bintree[nod+1,t+1]= bintree[nod,t] * d
                
    for t in range(m+1):
        for nod in range((m-t)+1):
            if t == 0:
                Valuemat[nod,m-t] = np.maximum(K-bintree[nod,m-t],0)
            else:
                conval = p * np.exp(-r*dt) * Valuemat[nod,m-(t-1)] + q * np.exp(-r*dt) * Valuemat[nod+1,m-(t-1)]
               
                Valuemat[nod,m-t] = np.maximum(K-bintree[nod,m-t],conval)
    
    for t in range(m):
        for nod in range(t+1):
            if nod%2 == 0:
                delta[nod,t] = (Valuemat[nod,t+1] - Valuemat[nod+1,t+1])/(bintree[nod,t+1]-bintree[nod+1,t+1])
            else:
                delta[nod,t] = (Valuemat[nod,t+1] - Valuemat[nod+1,t+1])/(bintree[nod,t+1]-bintree[nod+1,t+1])
    
    for t in range(m-1):
        for nod in range(t+1):
            if nod%2 == 0:
                gamma[nod,t] = (delta[nod,t+1] - delta[nod+1,t+1])/(bintree[nod,t+2]-bintree[nod+1,t+2])
                theta[nod,t] = (Valuemat[nod+1,t+2] - Valuemat[nod,t])/(2*dt)
            else:
                gamma[nod,t] = (delta[nod,t+1] - delta[nod+1,t+1])/(bintree[nod,t+2]-bintree[nod+1,t+2])
                theta[nod,t] = (Valuemat[nod+1,t+2] - Valuemat[nod,t])/(2*dt)
    
    return theta,delta,gamma

def put_american(S,K,r,T,sigma, m):
    dt = T/m
    bintree = np.zeros((m+1,m+1))
    bintree[0,0] = S
    Valuemat = np.zeros((m+1,m+1))
    
    u = np.exp(sigma*np.sqrt(dt))
    d = np.exp(-sigma*np.sqrt(dt))
    
    p = ((np.exp(r*dt)-d)/(u-d))
    q = (1-p)
    
    for t in range(m):
        for nod in range(t+1):
            if nod%2 == 0:
                bintree[nod,t+1]= bintree[nod,t] * u
                bintree[nod+1,t+1]= bintree[nod,t] * d
            else:
                bintree[nod+1,t+1]= bintree[nod,t] * d
    for t in range(m+1):
        for nod in range((m-t)+1):
            if t == 0:
                Valuemat[nod,m-t] = np.maximum(K-bintree[nod,m-t],0)
            else:
                conval = p * np.exp(-r*dt) * Valuemat[nod,m-(t-1)] + q * np.exp(-r*dt) * Valuemat[nod+1,m-(t-1)]
               
                Valuemat[nod,m-t] = np.maximum(K-bintree[nod,m-t],conval)
    return Valuemat[0,0]
    
def obfunc(sigma,S,K,r,T,m,price):
    #ändra funktionen här om ej american put
    binprice = put_american(S,K,r,T,sigma, m)
    res = binprice - price
    return res

def sigma_call_calc(bid,ask,K,S,r,T,sigmastart, m):
    #American option based on binomial tree
    #m is the amount of weeks to expiary, T is how big part of the year that is covered?
    #sigma from given table values?
    price = np.mean([bid,ask])   
    args = (S,K,r,T,m,price)
    implsig = fsolve(obfunc,sigmastart,args=args)
    return implsig

# def bermuda_payoff(S, T, timeNodes, r, sigma, K, rho):
    
    

# def least_square_MC(S1, T, timeNodes, r):
    
#     #approximate continuation value by a linear combination of
#     #chosen basic functions evaluated at s. The coefficient of the linear
#     #combination and determined by regression.
    
#     #Dependency of price, strike and time
    
#     V = np.zeros((len(S), len(timeNodes)))
    
#     for i in range(len(timeNodes)):
        
#         t_i = timeNodes[i]*T/6
        
#         for k in range(len(S)):
            
            
#             if i == timeNodes[-1]:
                
#                 V[k, i] = h
                
#             else:
            
#                 V[k, i] = np.maximum(h, np.exp(-r*t_i)*np.mean(V[k, i+1]*S[i+1]))


# M = [12, 52, 252]
# output = [dynamic_delta_hedge(100,100,0.03,1,0.3,1000,m) for m in M]

# mean_output = [x[0] for x in output]
# std_output = [x[1] for x in output]
              
# columns = ['Monthly', 'Weekly', 'Daily']
# index = ['Mean', 'Standard deviation']
# data = [mean_output, std_output]

# df_Q1 = pd.DataFrame(data = data,
#                       index = index,
#                       columns = columns)

# arr_output = [x[2] for x in output]

# plt.hist(arr_output[0],50,alpha=0.4)
# plt.hist(arr_output[1],50,alpha=0.4)
# plt.hist(arr_output[2],50,alpha=0.4)

#print(pathwise_asian_delta(100,100,0.03,0.2,1,12,20000))
#print(pathwise_asian_vega(100,100,0.03,0.2,1,12,20000))


date1 = date(2022,4,4)
date2 = date(2022,9,16)
    
m = int((abs(date1-date2).days)/7)+1

#sigma_call_calc(BRKB_calls[29,4:6],BRKB_calls[29,2])
#theta_delta_gamma(350,350,0.01,1,0.2, m)

#print(Berkshire_Hathaway_strangle(350,320,380,0.01,1,0.2, m))

#************ 3.a) ****************
price = float(BRKB_puts[34,5])+float(BRKB_calls[41,5])  # KOM IHÅG ATT ÄNDRA I LABBFIL


T = (m/52)

strikes = np.arange(29,49)
implied_vol = np.zeros((len(strikes),1))
for i in strikes:
    implied_vol[i-strikes[0],0] = sigma_call_calc(float(BRKB_puts[i,4]),float(BRKB_puts[i,5]), BRKB_puts[i,2], 350, 0.01, T, 0.15, m)

#plt.plot(implied_vol)

tet,delt,gamm=theta_delta_gamma(350,350,0.01,T,implied_vol[(40-29),0], m)

Greeks = [delt[0,0],gamm[0,0],tet[0,0]/252]
df_Q3 = pd.DataFrame(data=Greeks,index=(['delta', 'gamma', 'theta']),columns=(['value']))

end = timeit.timeit()
print(start-end)
