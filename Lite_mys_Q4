# -*- coding: utf-8 -*-
"""
Created on Fri May 27 13:06:08 2022

@author: oi19ham
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
N = norm.cdf

i = [1, 2, 3, 4, 5, 6]
T = 1
S = [100, 100]
sigma = 0.3
r = 0.03
paths = 40000
rho = [0, 0.5]
K = [70, 100, 130]

def bermuda_payoff(S, T, timeNodes, r, sigma, K, rho):
    
    

def least_square_MC(S1, T, timeNodes, r):
    
    #approximate continuation value by a linear combination of
    #chosen basic functions evaluated at s. The coefficient of the linear
    #combination and determined by regression.
    
    #Dependency of price, strike and time
    
    V = np.zeros((len(S), len(timeNodes)))
    
    for i in range(len(timeNodes)):
        
        t_i = timeNodes[i]*T/6
        
        for k in range(len(S)):
            
            
            if i == timeNodes[-1]:
                
                V[k, i] = h
                
            else:
            
                V[k, i] = np.maximum(h, np.exp(-r*t_i)*np.mean(V[k, i+1]*S[i+1]))
